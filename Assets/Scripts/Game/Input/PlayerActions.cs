//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Game/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TwitchListener.Game.Input
{
    public partial class @PlayerActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""GroundMovement"",
            ""id"": ""ea5edcd5-9a02-45d8-8b55-80f7eae29835"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2bd52e7c-2ec6-40a2-b09e-b14ad2ef13b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dd149de5-9a94-4cdf-8f1d-2e46703ef21f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3f179060-e397-44d1-9bd4-23767eca4a70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d2d9943-3d96-4053-b609-530c6e4d5858"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b8b05d50-dad2-47f1-9ef5-e4d6519fc9e4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""efcadb09-684d-4706-bcaf-05ea197f648c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""46f38adc-42c7-4388-9855-73ed2001be3d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3efb4413-d3a5-4c82-bcd3-6ac257f87618"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Look"",
            ""id"": ""b03d19d3-9640-4793-8549-eb053ab7123f"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""712d3ff4-6a2c-4e2e-b7cf-2ad1cdf23730"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""31c39cdb-41b6-426e-aa22-7c411ea4c875"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fca7b3e7-56e4-4a02-af62-ea605b470daa"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf9384f-f4b1-40f3-b414-832ae2eaa1e6"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shoot"",
            ""id"": ""506e1e56-4f15-4089-83d8-62097d7f4045"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""7ea11ce1-0f12-4823-9148-59fdef487db8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e96cc301-d663-47d7-880a-1a9987df8a8f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GroundMovement
            m_GroundMovement = asset.FindActionMap("GroundMovement", throwIfNotFound: true);
            m_GroundMovement_Move = m_GroundMovement.FindAction("Move", throwIfNotFound: true);
            m_GroundMovement_Jump = m_GroundMovement.FindAction("Jump", throwIfNotFound: true);
            // Look
            m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
            m_Look_MouseX = m_Look.FindAction("MouseX", throwIfNotFound: true);
            m_Look_MouseY = m_Look.FindAction("MouseY", throwIfNotFound: true);
            // Shoot
            m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
            m_Shoot_Primary = m_Shoot.FindAction("Primary", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GroundMovement
        private readonly InputActionMap m_GroundMovement;
        private IGroundMovementActions m_GroundMovementActionsCallbackInterface;
        private readonly InputAction m_GroundMovement_Move;
        private readonly InputAction m_GroundMovement_Jump;
        public struct GroundMovementActions
        {
            private @PlayerActions m_Wrapper;
            public GroundMovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_GroundMovement_Move;
            public InputAction @Jump => m_Wrapper.m_GroundMovement_Jump;
            public InputActionMap Get() { return m_Wrapper.m_GroundMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GroundMovementActions set) { return set.Get(); }
            public void SetCallbacks(IGroundMovementActions instance)
            {
                if (m_Wrapper.m_GroundMovementActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_GroundMovementActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_GroundMovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public GroundMovementActions @GroundMovement => new GroundMovementActions(this);

        // Look
        private readonly InputActionMap m_Look;
        private ILookActions m_LookActionsCallbackInterface;
        private readonly InputAction m_Look_MouseX;
        private readonly InputAction m_Look_MouseY;
        public struct LookActions
        {
            private @PlayerActions m_Wrapper;
            public LookActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseX => m_Wrapper.m_Look_MouseX;
            public InputAction @MouseY => m_Wrapper.m_Look_MouseY;
            public InputActionMap Get() { return m_Wrapper.m_Look; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
            public void SetCallbacks(ILookActions instance)
            {
                if (m_Wrapper.m_LookActionsCallbackInterface != null)
                {
                    @MouseX.started -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseX;
                    @MouseX.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseX;
                    @MouseX.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseX;
                    @MouseY.started -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseY;
                    @MouseY.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseY;
                    @MouseY.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseY;
                }
                m_Wrapper.m_LookActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MouseX.started += instance.OnMouseX;
                    @MouseX.performed += instance.OnMouseX;
                    @MouseX.canceled += instance.OnMouseX;
                    @MouseY.started += instance.OnMouseY;
                    @MouseY.performed += instance.OnMouseY;
                    @MouseY.canceled += instance.OnMouseY;
                }
            }
        }
        public LookActions @Look => new LookActions(this);

        // Shoot
        private readonly InputActionMap m_Shoot;
        private IShootActions m_ShootActionsCallbackInterface;
        private readonly InputAction m_Shoot_Primary;
        public struct ShootActions
        {
            private @PlayerActions m_Wrapper;
            public ShootActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Primary => m_Wrapper.m_Shoot_Primary;
            public InputActionMap Get() { return m_Wrapper.m_Shoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
            public void SetCallbacks(IShootActions instance)
            {
                if (m_Wrapper.m_ShootActionsCallbackInterface != null)
                {
                    @Primary.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnPrimary;
                    @Primary.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnPrimary;
                    @Primary.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnPrimary;
                }
                m_Wrapper.m_ShootActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Primary.started += instance.OnPrimary;
                    @Primary.performed += instance.OnPrimary;
                    @Primary.canceled += instance.OnPrimary;
                }
            }
        }
        public ShootActions @Shoot => new ShootActions(this);
        public interface IGroundMovementActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface ILookActions
        {
            void OnMouseX(InputAction.CallbackContext context);
            void OnMouseY(InputAction.CallbackContext context);
        }
        public interface IShootActions
        {
            void OnPrimary(InputAction.CallbackContext context);
        }
    }
}
